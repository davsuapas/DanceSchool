curl "http://localhost:8762/customerproxy/customers/search/econdName?secondName=Suarez&projection=descriptor"

curl -X POST -H "Content-Type: application/json" -d '[{"eventType":"ClientAssigned","entity":{"clientId":1,"clientName":"Cliente 1","classCalendarId":1,"classCalendarName":"Sala 1 - Aerobic","classCalendarDayId":1}},{"eventType":"ClientAssigned","entity":{"clientId":1,"clientName":"Cliente 1","classCalendarId":1,"classCalendarName":"Sala 1 - Aerobic","classCalendarDayId":1}}]' http://localhost:8762/classcustomerproxy/classcustomers/registers

curl -X POST -H "Content-Type: application/json" -d '{"classId":1,"customerId":1,"customerName":"dd, dd, dd"}' http://localhost:8762/classroomproxy/customerClasses

sudo systemctl start kafka
sudo systemctl start mongod

Config
------

MySql: 1234

· The config server does not complain to start if you configure wrong Git uri. The clients will fail when they try to fetch the configuration. To avoid this, always enable clone-on-start property, so that you will realize the mistakes before it’s too late.

spring.cloud.config.server.git.clone-on-start=true

· The config server uses a temporary location(/temp) on the file system to clone the repository and refers the same all the time. The linux machines temporarily cleans this directory and the config server never fetches the configuration again.

It is going to be very difficult to diagnose the issue when you have multiple instances of config servers. You can override the cloning directory using the basedir property.

spring.cloud.config.server.git.basedir=/opt/yourconfigrepo

· Also, make force-pull value to true to make sure the server fetches the configuration when the local repository is corrupted.

spring.cloud.config.server.git.force-pull=true


---------
spring install org.springframework.cloud:spring-cloud-cli:1.3.2.RELEASE
Now it is possible to encrypt the value “mysecret” with the key “foo”:

spring encrypt mysecret --key foo
The return value of this command is the encrypted property and we can add it to application.properties:

encrypted.property={cipher}711448026e2c6a977b2be1b22f13649cc938366397fbd345113d2a50e27c348f
-----------------

Dashboard: http://localhost:8763/hystrix
Turbine:
 http://localhost:8989/turbine/turbine.stream